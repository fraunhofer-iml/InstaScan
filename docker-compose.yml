services:
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: skala-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  document_analyzation_service:
    build:
      context: apps/document-analyzation-service
    depends_on:
      - rabbitmq
    environment:
      - AMQP_QUEUE_PREFIX=auavp-dev-
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - AZURE_API_ENDPOINT=${AZURE_API_ENDPOINT}
      - AZURE_API_KEY=${AZURE_API_KEY}
      - API_VERSION=${API_VERSION}
      - GPT_MODEL=${GPT_MODEL}

    ports:
      - "5000:5000"

  bff:
    build:
      dockerfile: ./docker/nest.dockerfile
      args:
        APP: bff
    ports:
      - "3000:3000"
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - BROKER_URI=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:5672
      - AMQP_QUEUE_PREFIX=auavp-dev-
    env_file:
      - .env

  frontend:
    build:
      dockerfile: ./docker/angular.dockerfile
      args:
        APP: frontend
    depends_on:
      - bff
    environment:
      - BASE_URL=http://localhost:3000
      - CAMERA_BASE_URL=http://localhost:5002/
    ports:
      - "8080:8080"

  storage-service:
    build:
      dockerfile: ./docker/nest.dockerfile
      args:
        APP: storage-service
    depends_on:
      skala-s3:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      - S3_ACCESS_KEY=${S3_USER}
      - S3_SECRET_KEY=${S3_PASSWORD}
      - S3_HOST=skala-s3
      - S3_BUCKET=skala-auavp
      - S3_PORT=9000
      - S3_STORAGE_URL=http://localhost:9000/skala-auavp/
      - BROKER_URI=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - AMQP_QUEUE_PREFIX=auavp-dev-
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=ap4
    ports:
      - "3030:3030"
    env_file:
      - .env

  ############
  # DATABASE #
  ############
  postgres:
    image: postgres:17
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=ap4
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
    logging:
      options:
        max-size: 10m
        max-file: '3'
    ports:
      - '5432:5432'
    env_file:
      - .env

  skala-s3:
    image: minio/minio
    container_name: skala-s3
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${S3_USER}
      MINIO_ROOT_PASSWORD: ${S3_PASSWORD}
      MINIO_DEFAULT_BUCKETS: skala-auavp
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                   # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
        mc alias set minio http://127.0.0.1:9000 $S3_USER $S3_PASSWORD     # setup Minio client
        mc mb minio/skala-auavp || true                                         # create a test bucket
        mc anonymous set public minio/skala-auavp                          # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
        exec minio $0 "$@"                                                 # start Minio in the foreground
      '
    command: server /data --console-address ":9001"
    volumes:
      - ~/s3/data:/data
    env_file:
      - .env

  s3-init:
    image: minio/mc
    volumes:
      - ./init-s3:/data
    depends_on:
      - skala-s3
    entrypoint: ["/data/upload.sh"]
    env_file:
      - .env

networks:
  camera_net:
    driver: macvlan
    driver_opts:
      parent: enp0s31f6 # @TODO in .env Datei auslagern
    ipam:
      config:
        - subnet: 169.254.0.0/16
