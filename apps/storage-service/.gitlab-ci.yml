variables:
  STORAGE_SERVICE_MODULE_NAME: "storage-service"
  STORAGE_SERVICE_PROJECT_DIR: $MODULE_DIR/$STORAGE_SERVICE_MODULE_NAME
  STORAGE_SERVICE_IMAGE_NAME: core/$STORAGE_SERVICE_MODULE_NAME
  STORAGE_SERVICE_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/$STORAGE_SERVICE_IMAGE_NAME
  STORAGE_SERVICE_SONAR_PROJECT_NAME: $SONAR_PROJECT_PREFIX-Storage-Service
  STORAGE_SERVICE_SONAR_PROJECT_KEY: $STORAGE_SERVICE_SONAR_PROJECT_NAME
  STORAGE_SERVICE_SONAR_BASE_DIR: ./$STORAGE_SERVICE_PROJECT_DIR

storage-service:tests:
  stage: test
  extends: .install-npm-packages
  script:
    - npx nx test storage-service
  coverage: '/Lines \W+: (\d+\.\d+)%.*/'
  artifacts:
    paths:
      - "${STORAGE_SERVICE_PROJECT_DIR}/coverage"
    expire_in: 1 week
  allow_failure: false
  only:
    - merge_requests
    - main

storage-service:sonarqube-check:
  stage: quality-analysis
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: ['']
  variables:
    SONAR_USER_HOME: '/apps/storage-service/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - /apps/storage-service/.sonar/cache
  script:
    - echo ${STORAGE_SERVICE_SONAR_PROJECT_NAME}
    - >
      sonar-scanner
      -Dsonar.projectBaseDir=./apps/storage-service/
      -Dsonar.pullrequest.key=${CI_MERGE_REQUEST_IID}
      -Dsonar.pullrequest.branch=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
      -Dsonar.pullrequest.base=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
  allow_failure: true
  only:
    - merge_requests
    - main

storage-service:build:
  stage: build
  extends: .install-npm-packages
  script:
    - npx nx run storage-service:build
  artifacts:
    paths:
      - dist/apps/storage-service
  allow_failure: false
  only:
    - merge_requests
    - main

storage-service:latest-build:
  stage: archive
  image: docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull --cache-from $STORAGE_SERVICE_REGISTRY_IMAGE --build-arg APP=storage-service -t $STORAGE_SERVICE_REGISTRY_IMAGE:latest -f docker/nest.dockerfile  .
    - docker push $STORAGE_SERVICE_REGISTRY_IMAGE:latest
  allow_failure: false
  only:
    - main

storage-service:container-build:
  stage: archive
  image: docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull --cache-from $STORAGE_SERVICE_REGISTRY_IMAGE --build-arg APP=storage-service -t $STORAGE_SERVICE_REGISTRY_IMAGE:$CI_COMMIT_TAG -f docker/nest.dockerfile  .
    - docker push $STORAGE_SERVICE_REGISTRY_IMAGE:$CI_COMMIT_TAG
  allow_failure: false
  only:
    - tags
