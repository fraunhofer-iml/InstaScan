[project]
name = "auavp.apps.document-analyzation-service"
dynamic = ["version"]
description = "Document Analyzation Service"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]
authors = [
  "Oleg Belov <oleg.belov@iml.fraunhofer.de>",
  "Tim Chilla <tim.chilla@iml.fraunhofer.de>",
  "Lukas Grieger <lukas.grieger@iml.fraunhofer.de>",
]
maintainers = [
  "Oleg Belov <oleg.belov@iml.fraunhofer.de>",
  "Tim Chilla <tim.chilla@iml.fraunhofer.de>",
  "Lukas Grieger <lukas.grieger@iml.fraunhofer.de>",
]
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "document_analyzation_service"}]
exclude =["tests"]

requires-python = ">=3.10,<4.0"

dependencies = [
    "pika",
    "uuid",
    "openai",
    "pillow",
    "dotenv"
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "mypy",
    "ruff",
]

[project.urls]
homepage = "https://gitlab.cc-asp.fraunhofer.de/skala/ap4/auavp"
repository = "https://gitlab.cc-asp.fraunhofer.de/skala/ap4/auavp"

[tool.setuptools.dynamic]
version = {attr = "document_analyzation_service.__version__"}

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
include = ["document_analyzation_service*"]  # package names should match these glob patterns (["*"] by default)
exclude = ["tests*"]  # exclude packages matching these glob patterns (empty by default)
namespaces = false  # to disable scanning PEP 420 namespaces (true by default)

[build-system]
# NOTE: Don't remove setuptools, therefore require it from the build system
requires = [
    "setuptools>=42",
    "wheel",
    "setuptools_scm[toml]>=3.4"
]
build-backend = "setuptools.build_meta"

# main tool for formatting and linting
[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 99
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "D", "D401"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"*tests/*" = ["D"]

[tool.ruff.lint.pydocstyle]
# Use google docstring convention
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


[tool.mypy]
python_version = "3.10"
exclude = ['tests', 'third-party-licenses']

junit_xml = "xunit-reports/xunit-result-mypy.xml"

# output style configuration
show_column_numbers = true
show_error_codes = true
pretty = true

# additional warnings
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true

no_implicit_optional = true
# unreachable code checking produces practically only false positives
warn_unreachable = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
# disallow_any_explicit = true
disallow_any_generics = true
disallow_untyped_calls = true
ignore_missing_imports = false


# ignores that library has no typing information with it
[[tool.mypy.overrides]]
module = ["pika"]
ignore_missing_imports = true
